#!/usr/bin/env bash

# Print lists of show episodes from a local database
# and track which episodes have been watched.

# Environment variables:
# SHOWS_DB        - Path of sqlite database containing information on show episodes
# SHOWS_CSV       - Path of csv file used for creating main menu
# SHOWS_MEDIA_DIR - Path of base directory where media files are found

get_episode()
{
	local choice=$1
	local table=$2

	case $choice in
		"next")
			sqlite3 "$SHOWS_DB" "SELECT NumOverall FROM $table WHERE WatchedDate IS NULL ORDER BY NumOverall LIMIT 1"
			;;
		"random")
			sqlite3 "$SHOWS_DB" "SELECT NumOverall FROM $table WHERE WatchedDate IS NULL ORDER BY random() LIMIT 1"
			;;
	esac
}

episode_menu()
{
	local table=$1
	local series_media_dir=$2
	local -i episode_num=$3

	sqlite3 "$SHOWS_DB" -box "SELECT * FROM $table WHERE NumOverall == $episode_num"
	echo

	[[ -n $series_media_dir ]] && echo "p. Play episode"
	[[ -n $episode_num ]] && echo "w. Mark episode $episode_num as watched"
}

series_menu()
{
	local table=$1
	local series_title=$2
	local series_media_dir=$3
	local -i episode_num

	echo
	echo "1) List episodes"
	echo "2) Next episode"
	echo "3) Random episode"
	echo "4) Select episode"
	[[ $table == "xfiles" ]] && echo "a) List mythology arc"
	echo "m) Main menu"
	echo

	while true; do
		local action
		read -rp "${series_title}> " action
		echo
		case $action in
			1)
				sqlite3 "$SHOWS_DB" -box "SELECT * from $table"
				echo
				;;
			2)
				episode_num=$(get_episode "next" "$table")

				if [[ $episode_num != 0 ]]; then
					episode_menu "$table" "$series_media_dir" "$episode_num"
					echo
				else
					echo "No unwatched episodes"
					echo
				fi
				;;
			3)
				episode_num=$(get_episode "random" "$table")

				if [[ $episode_num != 0 ]]; then
					episode_menu "$table" "$series_media_dir" "$episode_num"
					echo
				else
					echo "No unwatched episodes"
					echo
				fi
				;;
			4)
				read -rp "Episode: " episode_num
				episode_menu "$table" "$series_media_dir" "$episode_num"
				echo
				;;
			a)
				sqlite3 "$SHOWS_DB" -box "SELECT * FROM $table WHERE Mytharc IS NOT NULL"
				echo
				;;
			p)
				local episode_title
				episode_title=$(sqlite3 "$SHOWS_DB" "SELECT Title FROM $table WHERE NumOverall == $episode_num")

				local episode_filename
				episode_filename=$(find "$SHOWS_MEDIA_DIR/$series_media_dir" -type f 2> /dev/null \
					| fzf --ignore-case --select-1 --filter "${episode_title//[![:word:]]/}" \
					| head -n 1)

				if [[ -z $episode_filename ]]; then
					echo -e "Media not found\n"
					continue
				fi

				xdg-open "$episode_filename" 2> /dev/null
				;;
			w)
				sqlite3 "$SHOWS_DB" "UPDATE $table SET WatchedDate = date('now', 'localtime') WHERE NumOverall = $episode_num"
				;;
			m)
				break
				;;
			q)
				exit 0
				;;
		esac
	done
}

main_menu()
{
	while IFS=',' read -r tab ser dir; do
		local -a tables+=("$tab")
		local -a series_titles+=("$ser")
		local -a series_media_dirs+=("$dir")
	done < "$SHOWS_CSV"

	echo
	while true; do

		export COLUMNS=1
		export PS3=$'\n'"> "

		local item
		select item in "${series_titles[@]}"; do
			local -i index=$((REPLY - 1))
			local table=${tables[$index]}
			local series_title=$item
			local series_media_dir=${series_media_dirs[$index]}
			break
		done

		if [[ $REPLY == "q" ]]; then
			exit 0
		fi

		series_menu "$table" "$series_title" "$series_media_dir"

	done
}

set -o pipefail

main_menu
