#!/usr/bin/env bash

# mcal: Display and modify calendar events stored in local text files.

compile_events()
{
	local events

	events=$(find "$MCAL_DATA_DIR" -maxdepth 1 -type f -exec cat {} +)
	events+=$(printf "\n%(%F %a %H:%M)T       === TODAY ===" -1)

	echo "$events" | sort
}

week_view()
{
	local sm=$1        # Sunday or Monday
	local offset=$2    # Number of weeks forward or backward
	local -r day=86400 # Number of seconds in a day
	local week
	local first
	local last

	# Week number
	week=$(printf "%(%${sm})T" -1)

	# Set current day as first day of the week
	first=$(printf "%(%s)T" -1)

	# Walk backward to find week boundary
	while [[ $(printf "%(%${sm})T" "$first") == "$week" ]]; do
		first=$((first - day))
	done

	# Set first and last days of week
	first=$((first + day))
	last=$((first + (day * 6)))

	# Shift forward or backward by specified number of weeks
	if [[ -n $offset ]]; then
		offset=$((offset * day * 7))
		first=$((first + offset))
		last=$((last + offset))
	fi

	# Format first and last days of week for output
	first=$(printf "%(%F)T" "$first")
	last=$(printf "%(%F)T" "$last")

	compile_events | awk -v begin="$first" -v end="$last" '$1 >= begin && $1 <= end'
}

enter_new_event()
{
	local -l tags_input
	local -a tags
	local -a calendars
	local start_time
	local end_date
	local end_time
	local duration
	local calendar
	local tags_formatted
	local title
	local location
	local notes

	# Title
	read -rp "Title: " title

	# Start date
	read -rp "Start date: " start_date
	start_dates=("$(date --date="${start_date} 12 am" +%s)")

	# Start time
	read -rp "Start time: " start_time
	[[ $start_time ]] && start_time=$(date --date="$start_time" +%R)

	# End date
	read -rp "End date: " end_date
	end_date=$(date --date="${end_date:="@${start_dates[0]}"}" +%s)

	# End time
	read -rp "End time: " end_time
	[[ $end_time ]] && end_time=$(date --date="$end_time" +%R)

	# Event duration
	duration=$((end_date - "${start_dates[0]}"))

	# Calendar
	for file in "$MCAL_DATA_DIR"/*; do
		[[ -f $file ]] && calendars+=("${file##*/}")
	done

	calendar=$(gum filter \
		--height=10 \
		--placeholder="" \
		--header.foreground="" \
		--indicator.foreground="12" \
		--match.foreground="12" \
		--header="Calendar: " \
		"${calendars[@]}")

	echo "Calendar: $calendar"

	# Tags
	read -rp "Tags: " tags_input
	read -ra tags <<< "$tags_input"

	if [[ -n ${tags[*]} ]]; then
		for tag in "${tags[@]}"; do
			tags_formatted+="${tag}:"
		done
	fi

	# Location
	read -rp "Location: " location
	[[ $location ]] && location="<$location>"

	# Notes
	read -rp "Notes: " notes

	# Repeat
	read -rp "Repeat (y/N): " repeat
	[[ $repeat == "y" ]] && repeat

	# Store event information in event_info array
	event_info[start_time]="$start_time"
	event_info[end_time]="$end_time"
	event_info[duration]="$duration"
	event_info[calendar]="$calendar"
	event_info[tags_formatted]="$tags_formatted"
	event_info[title]="$title"
	event_info[location]="$location"
	event_info[notes]="$notes"
}

create_event()
{
	local start_date=$1
	local -r day=86400 # Number of seconds in a day
	local index=1
	local end_date
	local event

	# Retrieve event information from event_info array
	local start_time="${event_info[start_time]}"
	local end_time="${event_info[end_time]}"
	local duration="${event_info[duration]}"
	local calendar="${event_info[calendar]}"
	local tags_formatted="${event_info[tags_formatted]}"
	local title="${event_info[title]}"
	local location="${event_info[location]}"
	local notes="${event_info[notes]}"

	end_date=$((start_date + duration))

	while [[ $start_date -le $end_date ]]; do

		# Date including weekday
		event=$(printf "%(%F %a)T" "$start_date")

		# Start time: first day of event only
		if [[ $index == 1 ]]; then
			event+=" ${start_time:-"-----"}-"
		else
			event+=" ------"
		fi

		# End time: last day of event only
		if [[ $start_date == "$end_date" ]]; then
			event+="${end_time:-"-----"} "
		else
			event+="----- "
		fi

		# Calendar, tags, and title
		event+="${calendar}:${tags_formatted} [${title}]"

		# Index: multi-day event only
		[[ $duration -gt 0 ]] && event+="$index"

		# Location
		event+=" $location "

		# Notes: first day of event only
		[[ $index == 1 ]] && event+="$notes"

		echo "$event" | tee -a "$MCAL_DATA_DIR/$calendar"

		start_date=$((start_date + day))
		((index++))

	done
}

repeat()
{
	local PS3="> "
	local getdates_command="getdates "
	local mode
	local interval
	local unit
	local mn
	local weekday
	local end_repeat

	echo "Repeat:"
	select unit in "Daily" "Weekly" "Monthly"; do
		case $unit in
			"Daily")
				unit="days"
				getdates_command+="r -d "
				;;
			"Weekly")
				unit="weeks"
				getdates_command+="r -w "
				;;
			"Monthly")
				unit="months"
				getdates_command+="m "
				;;
		esac
		break
	done

	read -rp "Repeat every _ ${unit}: " interval
	getdates_command+="-i ${interval:=1} "

	if [[ $unit == "months" ]]; then
		echo "On: "
		select md in "Day of month" "Weekday"; do
			break
		done
		case $md in
			"Day of month")
				read -rp "Day of month: " mn
				getdates_command+="-d -mn ${mn} "
				;;
			"Weekday")
				select weekday in "Monday" "Tuesday" "Wednesday" \
					"Thursday" "Friday" "Saturday" "Sunday"; do
					read -rp "Which ${weekday}? " mn
					break
				done
				getdates_command+="-k ${weekday:0:3} -mn ${mn} "
				;;
		esac
	fi

	read -rp "Until (date): " end_repeat
	end_repeat=$(date --date="$end_repeat" +%F)
	getdates_command+="-e $end_repeat"

	mapfile -t start_dates < <($getdates_command)
}

ordinal()
{
	local num=$1

	if [[ $((num % 100)) -ge 11 ]] && [[ $((num % 100)) -le 19 ]]; then
		echo "${num}th"
	elif [[ $((num % 10)) == 1 ]]; then
		echo "${num}st"
	elif [[ $((num % 10)) == 2 ]]; then
		echo "${num}nd"
	elif [[ $((num % 10)) == 3 ]]; then
		echo "${num}rd"
	else
		echo "${num}th"
	fi
}

birthdays()
{
	local current_year
	local name_in_events
	local bday_month_day
	local bday_output
	local bday_year
	local age
	local age_ordinal

	# Operate on each line of the birthdays template file
	while IFS=$'\t' read -r bday_input name; do

		# Check if name from line in template file has a corresponding
		# birthday event for the current year in the calendar
		current_year=$(printf "%(%Y)T" -1)
		name_in_events=$(grep "${current_year}.*${name}" "$birthday_events")

		# Create a new birthday event if one does not exist
		if [[ -z $name_in_events ]]; then

			# Calculate age
			bday_year=$(date --date="$bday_input" +%Y)
			age=$((current_year - bday_year))
			[[ $age -gt 0 ]] && age_ordinal="$(ordinal $age) "

			# Prepare date for output
			bday_month_day=$(date --date="$bday_input" +"%m/%d")
			bday_output=$(date --date="$bday_month_day" +"%F %a")

			printf "%s ----------- Birthdays: %s's %sbirthday\n" \
				"$bday_output" \
				"$name" \
				"${age_ordinal:-}" \
				>> "$birthday_events"

		fi

	done < "$template_birthdays"
}

case $1 in
	"b")
		# Add new birthday events from template
		declare template_birthdays="$MCAL_DATA_DIR/templates/template_birthdays"
		declare birthday_events="$MCAL_DATA_DIR/Birthdays"

		birthdays
		;;
	"e")
		# Edit calendar files
		(cd "$MCAL_DATA_DIR" && nvim -c FZF)
		;;
	"m")
		# Show all events for current month
		compile_events | grep --color=auto "$(printf "%(%Y-%m)T" -1)"
		;;
	"n")
		# Add new event interactively
		declare -a start_dates
		declare -A event_info

		enter_new_event

		for i in "${start_dates[@]}"; do
			create_event "$i"
		done
		;;
	"r")
		# Show all events from specified begin date to end date
		compile_events | awk -v begin="$2" -v end="$3" '$1 >= begin && $1 <= end'
		;;
	"t")
		# Show all events for current day
		compile_events | grep --color=auto "$(printf "%(%F)T" -1)"
		;;
	"wm")
		# Show all events for current week beginning Monday
		declare offset="$2"

		week_view "V" "$offset"
		;;
	"ws")
		# Show all events for current week beginning Sunday
		declare offset="$2"

		week_view "U" "$offset"
		;;
	"")
		# Show all events
		compile_events
		;;
	*)
		# Show all events that match pattern
		declare pattern="${*}"

		compile_events | grep --color=auto "$pattern"
		;;
esac
