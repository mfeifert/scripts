#!/usr/bin/env bash

# Display and modify calendar events stored in local text files.

[[ $1 == "e" ]] && (cd "$MCAL_DATA_DIR" && nvim -c FZF) && exit

data_birthdays="$MCAL_DATA_DIR/Birthdays"
template_birthdays="$MCAL_DATA_DIR/templates/template_birthdays"

readonly day=86400 # Number of seconds in a day
today=$(printf "%(%F %a %H:%M)T       === TODAY ===" -1)
cal_events=$(find "$MCAL_DATA_DIR" -maxdepth 1 -type f -exec cat {} + && printf "%s\n" "$today")

repeating_event()
{
	getdates_command="getdates"

	read -rp "Mode (r or m): " mode

	case $mode in
		"r")
			getdates_command+=" r"

			read -rp "Repeat every: " interval
			getdates_command+=" -i $interval"

			select unit in "Days" "Weeks" "Weekday"; do
				case $unit in
					"Days")
						getdates_command+=" -d"
						;;
					"Weeks")
						getdates_command+=" -w"
						;;
				esac
				break
			done
			;;

		"m")
			getdates_command+=" m"

			read -rp "Repeat every (number): " mn

			select unit in "Day of month" "Weekday"; do
				case $unit in
					"Day of month")
						getdates_command+=" -d -mn $mn"
						;;
					"Weekday")
						select weekday in "Monday" "Tuesday" "Wednesday" \
							"Thursday" "Friday" "Saturday" "Sunday"; do
							getdates_command+=" -k ${weekday:0:3} -mn $mn"
							break
						done
						;;
				esac
				break
			done
			;;

	esac

	read -rp "Until (date): " end_date
	getdates_command+=" -e $end_date"

	mapfile -t start_dates < <($getdates_command)
}

enter_new_event()
{
	# Title
	read -rp "Title: " title

	# Start date
	read -rp "Start date: " start_date
	start_dates=("$(date --date="${start_date:="today 12 am"}" +%s)")

	# Start time
	read -rp "Start time: " start_time
	[[ $start_time ]] && start_time=$(date --date="$start_time" +%R)

	# End date
	read -rp "End date: " end_date
	end_date=$(date --date="${end_date:=@"${start_dates[0]}"}" +%s)

	# Event duration
	event_duration=$((end_date - "${start_dates[0]}"))

	# End time
	read -rp "End time: " end_time
	[[ $end_time ]] && end_time=$(date --date="$end_time" +%R)

	# Calendar
	calendars=()
	for file in "$MCAL_DATA_DIR"/*; do
		[[ -f $file ]] && calendars+=("${file##*/}")
	done

	calendar=$(gum filter \
		--height=10 \
		--placeholder="" \
		--header.foreground="" \
		--indicator.foreground="12" \
		--match.foreground="12" \
		--header="Calendar: " \
		"${calendars[@]}")

	echo "Calendar: $calendar"

	# Tags
	read -rp "Tags: " tags_input
	read -ra tags <<< "${tags_input,,}"

	if [[ -n ${tags[*]} ]]; then
		for tag in "${tags[@]}"; do
			tags_formatted+="${tag}:"
		done
	fi

	# Location
	read -rp "Location: " location
	[[ $location ]] && location=" <$location>"

	# Notes
	read -rp "Notes: " notes

	# Repeating event
	read -rp "Repeating event? (y/N): " repeat
	[[ $repeat == "y" ]] && repeating_event

	# Create calendar event

	for i in "${start_dates[@]}"; do
		create_event "$i"
	done
}

create_event()
{
	start_date="$1"

	date=$(printf "%(%F %a)T" "$start_date")

	if [[ $event_duration -gt $day ]]; then

		# Create event spanning multiple days
		index=1
		end_date=$((start_date + event_duration))

		printf "%s %s------ %s:%s [%s]%s%s %s\n" \
			"$date" \
			"${start_time:------}" \
			"$calendar" \
			"$tags_formatted" \
			"$title" \
			"$index" \
			"$location" \
			"$notes" \
			| tee -a "$MCAL_DATA_DIR/$calendar"

		while [[ $start_date -lt $((end_date - day)) ]]; do

			((index++))
			start_date=$((start_date + day))
			date=$(printf "%(%F %a)T" "$start_date")

			printf "%s ----------- %s:%s [%s]%s%s\n" \
				"$date" \
				"$calendar" \
				"$tags_formatted" \
				"$title" \
				"$index" \
				"$location" \
				| tee -a "$MCAL_DATA_DIR/$calendar"

		done

		((index++))
		date=$(printf "%(%F %a)T" "$end_date")

		printf "%s ------%s %s:%s [%s]%s%s\n" \
			"$date" \
			"${end_time:------}" \
			"$calendar" \
			"$tags_formatted" \
			"$title" \
			"$index" \
			"$location" \
			| tee -a "$MCAL_DATA_DIR/$calendar"

	else

		# Create single-day event
		printf "%s %s-%s %s:%s [%s]%s %s\n" \
			"$date" \
			"${start_time:------}" \
			"${end_time:------}" \
			"$calendar" \
			"$tags_formatted" \
			"$title" \
			"$location" \
			"$notes" \
			| tee -a "$MCAL_DATA_DIR/$calendar"

	fi
}

birthdays()
{
	while IFS=$'\t' read -r bday_input name; do

		# Check if name from line in template already has
		# a birthday calendar event for the current year.
		# Create a new event only if one does not already exist.
		name_in_events=$(grep "$(printf "%(%Y)T" -1).*${name}" "$data_birthdays")

		if [[ -z $name_in_events ]]; then

			bday_month_day=$(date --date="$bday_input" +"%m/%d")
			bday_output=$(date --date="$bday_month_day" +"%F %a")
			bday_year=$(date --date="$bday_input" +%Y)
			age=$(($(printf "%(%Y)T" -1) - bday_year))

			[[ $age -gt 0 ]] && age_ordinal="$(echo $age | ordinal) "

			printf "%s ----------- Birthdays: %s's %sbirthday\n" \
				"$bday_output" \
				"$name" \
				"${age_ordinal:-}" \
				>> "$data_birthdays"

		fi

	done < "$template_birthdays"
}

week_view()
{
	sm=$1
	offset=$2

	week=$(printf "%(%${sm})T" -1)
	first=$(printf "%(%s)T" -1)

	while [[ $(printf "%(%${sm})T" "$first") == "$week" ]]; do
		first=$((first - day))
	done

	first=$((first + day))
	last=$((first + (day * 6)))

	if [[ -n $offset ]]; then
		offset=$((offset * day * 7))
		first=$((first + offset))
		last=$((last + offset))
	fi

	first=$(printf "%(%F)T" "$first")
	last=$(printf "%(%F)T" "$last")

	echo "$cal_events" | sort | awk -v begin="$first" -v end="$last" '$1 >= begin && $1 <= end'
}

case $1 in
	"t")
		# Show all events for current day
		echo "$cal_events" | sort | grep --color=auto "$(printf "%(%F)T" -1)"
		;;
	"m")
		# Show all events for current month
		echo "$cal_events" | sort | grep --color=auto "$(printf "%(%Y-%m)T" -1)"
		;;
	"n")
		# Add new event interactively
		enter_new_event
		;;
	"b")
		# Add new birthday events from template
		birthdays
		;;
	"r")
		# Show all events from specified begin date to end date
		echo "$cal_events" | sort | awk -v begin="$2" -v end="$3" '$1 >= begin && $1 <= end'
		;;
	"wm")
		# Show all events for current week beginning Monday
		week_view "V" "$2"
		;;
	"ws")
		# Show all events for current week beginning Sunday
		week_view "U" "$2"
		;;
	"")
		# Show all events
		echo "$cal_events" | sort
		;;
	*)
		# Show all events that match pattern
		echo "$cal_events" | sort | grep --color=auto "${*}"
		;;
esac
