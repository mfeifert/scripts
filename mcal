#!/usr/bin/env bash

# Display and modify calendar events stored in local text files.

[[ $1 == "e" ]] && (cd "$MCAL_DATA_DIR" && nvim -c FZF) && exit

data_birthdays="$MCAL_DATA_DIR/Birthdays"
template_birthdays="$MCAL_DATA_DIR/templates/template_birthdays"

today=$(printf "%(%F %a %H:%M)T       === TODAY ===" -1)
cal_events=$(find "$MCAL_DATA_DIR" -maxdepth 1 -type f -exec cat {} + && printf "%s\n" "$today")

repeating_event()
{
	true
}

enter_new_event()
{
	day=86400 # Number of seconds in a day

	# Title
	read -rp "Title: " title

	# Start date
	read -rp "Start date: " start_date
	start_date=($(date --date="${start_date:=today}" +%s))

	# Start time
	read -rp "Start time: " start_time
	[[ $start_time ]] && start_time=$(date --date="$start_time" +%R)

	# End date
	read -rp "End date: " end_date
	end_date=$(date --date="${end_date:=@$start_date}" +%s)

	# End time
	read -rp "End time: " end_time
	[[ $end_time ]] && end_time=$(date --date="$end_time" +%R)

	# Calendar
	calendars=()
	for file in "$MCAL_DATA_DIR"/*; do
		[[ -f $file ]] && calendars+=("${file##*/}")
	done

	calendar=$(gum filter \
		--height=10 \
		--placeholder="" \
		--header.foreground="" \
		--indicator.foreground="12" \
		--match.foreground="12" \
		--header="Calendar: " \
		"${calendars[@]}")

	echo "Calendar: $calendar"

	# Tags
	read -rp "Tags: " tags

	# Location
	read -rp "Location: " location
	[[ $location ]] && location=" <$location>"

	# Notes
	read -rp "Notes: " notes

	# Repeating event
	read -rp "Repeating event? (y/N): " repeat
	[[ $repeat == "y" ]] && repeating_event

	# Create calendar event
	event_duration=$((((end_date - start_date) / day) + 1))
	create_event "$start_date"

	# for i in "${dates[@]}"; do
	# 	create_event $i
	# done
}

create_event()
{
	date=$(date --date="@$1" +"%F %a")

	if [[ $event_duration > 1 ]]; then

		# Create event spanning multiple days
		end_date=$(date --date="$date +${event_duration}days" +%s)

		echo "${date} ${start_time:------}------ ${calendar}:${tags} |[${title}]${location} ${notes}" \
			| tee -a "$MCAL_DATA_DIR/$calendar"

		while [[ $start_date < $((end_date - day)) ]]; do
			start_date=$((start_date + day))
			date=$(date --date="@$start_date" +"%F %a")
			echo "${date} ----------- ${calendar}:${tags} |[${title}]${location}" \
				| tee -a "$MCAL_DATA_DIR/$calendar"
		done

		date=$(date --date="@$end_date" +"%F %a")

		echo "${date} ------${end_time:------} ${calendar}:${tags} |[${title}]${location}" \
			| tee -a "$MCAL_DATA_DIR/$calendar"

	else

		# Create single-day event
		echo "${date} ${start_time:------}-${end_time:------} ${calendar}:${tags} [${title}]${location} ${notes}" \
			| tee -a "$MCAL_DATA_DIR/$calendar"
	fi

}

birthdays()
{
	while IFS=$'\t' read -r bday_input name; do

		# Check if name from line in template already has
		# a birthday calendar event for the current year.
		# Create a new event only if one does not already exist.
		name_in_data=$(grep "$(date +%Y).*${name}" "$data_birthdays")

		if [[ -z $name_in_data ]]; then

			bday_md=$(date --date="$bday_input" +"%m/%d")
			bday_output=$(date --date="$bday_md" +"%F %a")
			bday_year=$(date --date="$bday_input" +%Y)
			age=$(("$(date +%Y)" - "$bday_year"))

			if [[ $age -gt 0 ]]; then
				age_ordinal="$(echo ${age} | ordinal) "
			else
				age_ordinal=""
			fi

			echo "${bday_output} ----------- Birthdays: ${name}'s ${age_ordinal}birthday" >> "$data_birthdays"
		fi

	done < "$template_birthdays"
}

case $1 in
	"t")
		# Show all events for current day
		echo "$cal_events" | sort | grep --color=auto "$(printf "%(%F)T" -1)"
		;;
	"m")
		# Show all events for current month
		echo "$cal_events" | sort | grep --color=auto "$(printf "%(%Y-%m)T" -1)"
		;;
	"md")
		# Show all multi-day events
		echo "$cal_events" | sort | grep --color=auto -e "┏" -e "┓" -e "┃" -e "┗" -e "┛"
		;;
	"n")
		# Add new event interactively
		enter_new_event
		;;
	"b")
		# Add new birthday events from template
		birthdays
		;;
	"r")
		# Show all events from specified begin date to end date
		echo "$cal_events" | sort | awk -v begin="$2" -v end="$3" '$1 >= begin && $1 <= end'
		;;
	"")
		# Show all events
		echo "$cal_events" | sort
		;;
	*)
		# Show all events that match pattern
		echo "$cal_events" | sort | grep --color=auto "${*}"
		;;
esac
