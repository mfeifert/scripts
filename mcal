#!/usr/bin/env bash

# mcal: Create and view calendar events stored in local text files.

compile_events()
{
	local archive=$1

	local events
	events=$(find "$MCAL_DATA_DIR" -maxdepth 1 -type f -exec cat {} +)

	if [[ $archive == "archive" ]]; then
		events+=$'\n'
		events+=$(find "$MCAL_DATA_DIR/archive" -maxdepth 1 -type f -exec cat {} +)
	fi

	events+=$(printf "\n%(%F %a %H:%M)T       === TODAY ===" -1)

	echo "$events" | sort
}

week_view()
{
	local sm=$1         # Sunday or Monday
	local -i offset=$2  # Number of weeks forward or backward
	local -ir day=86400 # Seconds per day

	# Week number
	local -i week
	week=$(printf "%(%${sm})T" -1)

	# Start at the current day
	local first
	first=$(printf "%(%s)T" -1)

	# Walk backward to find week boundary
	while [[ $(printf "%(%${sm})T" "$first") == "$week" ]]; do
		first=$((first - day))
	done

	# Set first and last days of week
	local last
	first=$((first + day))
	last=$((first + (day * 6)))

	# Shift forward or backward by specified number of weeks
	if [[ -n $offset ]]; then
		offset=$((offset * day * 7))
		first=$((first + offset))
		last=$((last + offset))
	fi

	first=$(printf "%(%F)T" "$first")
	last=$(printf "%(%F)T" "$last")

	compile_events | awk -v begin="$first" -v end="$last" '$1 >= begin && $1 <= end'
}

enter_new_event()
{
	# Title
	local title
	read -rp "Title: " title
	[[ -n $title ]] && title=" [${title}]"

	# Start date
	local start_date
	declare -ag start_dates
	read -rp "Start date: " start_date
	start_dates=("$(date --date="${start_date} 12 am" +%s)")

	# Start time
	local start_time
	read -rp "Start time: " start_time
	[[ -n $start_time ]] && start_time=$(date --date="$start_time" +%R)

	# End date
	local end_date
	read -rp "End date: " end_date
	end_date=$(date --date="${end_date:="@${start_dates[0]}"}" +%s)

	# End time
	local end_time
	read -rp "End time: " end_time
	[[ -n $end_time ]] && end_time=$(date --date="$end_time" +%R)

	# Event duration
	local -i duration
	duration=$((end_date - "${start_dates[0]}"))

	# Calendar
	local -a calendars
	for file in "$MCAL_DATA_DIR"/*; do
		[[ -f $file ]] && calendars+=("${file##*/}")
	done

	local calendar
	calendar=$(gum filter \
		--height=10 \
		--placeholder="" \
		--header.foreground="" \
		--indicator.foreground="12" \
		--match.foreground="12" \
		--header="Calendar: " \
		"${calendars[@]}")

	echo "Calendar: $calendar"

	# Tags
	local -l tags_input
	read -rp "Tags: " tags_input

	local -a tags
	read -ra tags <<< "$tags_input"

	local tags_formatted
	if [[ -n ${tags[*]} ]]; then
		for tag in "${tags[@]}"; do
			tags_formatted+="${tag}:"
		done
	fi

	# Location
	local location
	read -rp "Location: " location
	[[ -n $location ]] && location=" <$location>"

	# Notes
	local notes
	read -rp "Notes: " notes
	[[ -n $notes ]] && notes=" $notes"

	declare -Ag event_info
	event_info[start_time]="$start_time"
	event_info[end_time]="$end_time"
	event_info[duration]="$duration"
	event_info[calendar]="$calendar"
	event_info[tags_formatted]="$tags_formatted"
	event_info[title]="$title"
	event_info[location]="$location"
	event_info[notes]="$notes"
}

create_event()
{
	local -i start_date=$1

	local start_time="${event_info[start_time]}"
	local end_time="${event_info[end_time]}"
	local -i duration="${event_info[duration]}"
	local calendar="${event_info[calendar]}"
	local tags_formatted="${event_info[tags_formatted]}"
	local title="${event_info[title]}"
	local location="${event_info[location]}"
	local notes="${event_info[notes]}"

	local -i end_date
	end_date=$((start_date + duration))

	local -i index=1
	local -ir day=86400 # Seconds per day

	while [[ $start_date -le $end_date ]]; do

		# Date including weekday
		local event
		event=$(printf "%(%F %a)T" "$start_date")

		# Start time: first day of event only
		if [[ $index == 1 ]]; then
			event+=" ${start_time:-"-----"}-"
		else
			event+=" ------"
		fi

		# End time: last day of event only
		if [[ $start_date == "$end_date" ]]; then
			event+="${end_time:-"-----"} "
		else
			event+="----- "
		fi

		# Calendar, tags, and title
		event+="${calendar}:${tags_formatted}${title}"

		# Index: multi-day event only
		[[ $duration -gt 0 ]] && event+="$index"

		# Location
		event+="$location"

		# Notes: first day of event only
		[[ $index == 1 ]] && event+="$notes"

		echo "$event" | tee -a "$MCAL_DATA_DIR/$calendar"

		start_date=$((start_date + day))
		((index++))

	done
}

repeat()
{
	local PS3="> "
	local getdates_command="getdates "

	if ! command -v getdates > /dev/null 2>&1; then
		echo "To create repeating events, install getdates (https://github.com/mfeifert/getdates)"
		return
	fi

	echo "Repeat:"
	local unit
	select unit in "Daily" "Weekly" "Monthly"; do
		case $unit in
			"Daily")
				unit="days"
				getdates_command+="r -d "
				;;
			"Weekly")
				unit="weeks"
				getdates_command+="r -w "
				;;
			"Monthly")
				unit="months"
				getdates_command+="m "
				;;
		esac
		break
	done

	local -i interval
	read -rp "Repeat every # ${unit}: " interval
	getdates_command+="-i ${interval:=1} "

	if [[ $unit == "months" ]]; then

		echo "On: "
		local md
		select md in "Day" "Weekday"; do
			break
		done

		local -i mn
		case $md in
			"Day")
				read -rp "Day: " mn
				getdates_command+="-d -mn ${mn} "
				;;
			"Weekday")
				local weekday
				select weekday in "Monday" "Tuesday" "Wednesday" \
					"Thursday" "Friday" "Saturday" "Sunday"; do
					read -rp "${weekday} #: " mn
					break
				done
				getdates_command+="-k ${weekday:0:3} -mn ${mn} "
				;;
		esac

	fi

	local end_repeat
	read -rp "Until: " end_repeat
	end_repeat=$(date --date="$end_repeat" +%F)
	getdates_command+="-e $end_repeat"

	local -a new_dates
	mapfile -t new_dates < <($getdates_command)
	start_dates+=("${new_dates[@]}")
}

ordinal()
{
	local -i num=$1

	if [[ $((num % 100)) -ge 11 ]] && [[ $((num % 100)) -le 19 ]]; then
		echo "${num}th"
	elif [[ $((num % 10)) == 1 ]]; then
		echo "${num}st"
	elif [[ $((num % 10)) == 2 ]]; then
		echo "${num}nd"
	elif [[ $((num % 10)) == 3 ]]; then
		echo "${num}rd"
	else
		echo "${num}th"
	fi
}

birthdays()
{
	local bday_input name
	while IFS=$'\t' read -r bday_input name; do

		# Check if name from line in template file has a corresponding
		# birthday event for the current year in the calendar
		local -i current_year
		local name_in_events
		current_year=$(printf "%(%Y)T" -1)
		name_in_events=$(grep "${current_year}.*${name}" "$birthday_events")

		# Create a new birthday event if one does not exist
		if [[ -z $name_in_events ]]; then

			# Calculate age
			local -i bday_year age
			local age_ordinal
			bday_year=$(date --date="$bday_input" +%Y)
			age=$((current_year - bday_year))
			[[ $age -gt 0 ]] && age_ordinal="$(ordinal $age) "

			# Format date for output
			local bday_month_day bday_output
			bday_month_day=$(date --date="$bday_input" +"%m/%d")
			bday_output=$(date --date="$bday_month_day" +"%F %a")

			printf "%s ----------- Birthdays: %s's %sbirthday\n" \
				"$bday_output" \
				"$name" \
				"${age_ordinal:-}" \
				| tee -a "$birthday_events"

		fi

	done < "$template_birthdays"
}

case $1 in
	"a")
		# View all events including archived events
		compile_events "archive"
		;;
	"b")
		# Add new birthday events from template
		declare template_birthdays="$MCAL_DATA_DIR/templates/template_birthdays"
		declare birthday_events="$MCAL_DATA_DIR/Birthdays"

		birthdays
		;;
	"e")
		# Edit calendar files
		(cd "$MCAL_DATA_DIR" && nvim -c FZF)
		;;
	"m")
		# View all events for current month
		compile_events | grep --color=auto "$(printf "%(%Y-%m)T" -1)"
		;;
	"n")
		# Add new event interactively
		enter_new_event

		declare repeat_event
		read -rp "Repeat [y/N]: " repeat_event
		while [[ ${repeat_event@L} == "y" ]]; do
			repeat
			read -rp "Repeat additional [y/N] " repeat_event
		done

		for i in "${start_dates[@]}"; do
			create_event "$i"
		done
		;;
	"r")
		# View all events from specified begin date to end date
		compile_events | awk -v begin="$2" -v end="$3" '$1 >= begin && $1 <= end'
		;;
	"t")
		# View all events for current day
		compile_events | grep --color=auto "$(printf "%(%F)T" -1)"
		;;
	"wm")
		# View all events for current week beginning Monday
		declare -i offset="$2"

		week_view "V" "$offset"
		;;
	"ws")
		# View all events for current week beginning Sunday
		declare -i offset="$2"

		week_view "U" "$offset"
		;;
	"z")
		# Test repeat()
		repeat

		declare repeat_event
		read -rp "Repeat additional [y/N] " repeat_event
		while [[ ${repeat_event@L} == "y" ]]; do
			repeat
			read -rp "Repeat additional [y/N] " repeat_event
		done

		for i in "${start_dates[@]}"; do
			printf "%(%F %a)T\n" "$i"
		done
		;;
	"")
		# View all events
		compile_events
		;;
	*)
		# View all events that match pattern
		declare pattern="${*}"

		compile_events | grep --color=auto "$pattern"
		;;
esac
