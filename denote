#!/usr/bin/env bash

# Create denote notes interactively.
# Based on "denote" Emacs package by Protesilaos Stavrou.
# https://protesilaos.com/
# https://github.com/protesilaos/denote

# This script creates new notes with exactly the same filename
# and front matter format as the original Emacs denote.  It does
# not provide the more advanced features of the original, such as
# modifying properties of existing files or creating links.

notes_dir="$NOTES_DIR"

make_filename()
{
	# ID
	local filename+="$id"

	# Signature: convert signature to lowercase and replace spaces with "="
	if [[ -n $signature ]]; then
		local sig="${signature,,}"
		filename+="==${sig// /=}"
	fi

	# Title: convert title to lowercase and replace spaces with "-"
	local title=${title,,}
	filename+="--${title// /-}"

	# Tags: replace spaces with "_"
	if [[ -n $tags ]]; then
		filename+="_"
		for tag in "${tags[@]}"; do
			filename+="_${tag}"
		done
	fi

	# File extension: remove "-yaml" or "-toml"
	filename+=".${filetype%-*}"

	echo "$filename"
}

make_txt()
{
	local date
	local tags_txt
	local front_matter

	# Format date and tags for txt front matter
	date=$(date --date="@$timestamp" +%F)
	tags_txt=$(printf '%s  ' "${tags[@]}")

	# Front matter template for txt
	front_matter=$(
		cat << EOF
title:      ${title}
date:       ${date}
tags:       ${tags_txt%  }
identifier: ${id}
---------------------------
EOF
	)

	echo -e "$front_matter" "\n"
}

make_md()
{
	local date
	local tags_md
	local front_matter

	# Format date and tags for markdown front matter
	date=$(date --date="@$timestamp" +"%FT%H:%M:%S%:z")
	tags_md=$(printf '"%s", ' "${tags[@]}")

	# Front matter template for markdown-yaml
	[[ $1 == "yaml" ]] && front_matter=$(
		cat << EOF
---
title:      "${title}"
date:       ${date}
tags:       [${tags_md%, }]
identifier: "${id}"
---
EOF
	)

	# Front matter template for markdown-toml
	[[ $1 == "toml" ]] && front_matter=$(
		cat << EOF
+++
title      = "${title}"
date       = ${date}
tags       = [${tags_md%, }]
identifier = "${id}"
+++
EOF
	)

	echo -e "$front_matter" "\n"
}

make_org()
{
	local date
	local tags_org
	local front_matter

	# Format date and tags for org front matter
	date=$(date --date="@$timestamp" +"%F %a %H:%M")
	tags_org=$(printf '%s:' "${tags[@]}")

	# Front matter template for org
	front_matter=$(
		cat << EOF
#+title:      ${title}
#+date:       [${date}]
#+filetags:   :${tags_org}
#+identifier: ${id}
EOF
	)

	echo -e "$front_matter" "\n"
}

# Select file type
filetypes=("txt" "md-yaml" "md-toml" "org")
PS3="> "
select item in "${filetypes[@]}"; do
	filetype="$item"
	break
done

# Enter signature
read -rp "Signature: " signature

# Enter title
read -rp "Title: " title

# Enter tags separated by spaces and convert to lowercase
read -rp "Tags: " tags_string
tags=(${tags_string,,})

# Generate timestamp for id and front matter date
timestamp=$(printf '%(%s)T')

# Create ID from timestamp
id=$(date --date="@$timestamp" +"%Y%m%dT%H%M%S")

# Generate filename and full filepath
filename=$(make_filename)
filepath="${notes_dir}/${filename}"

# Create file containing front matter
case $filetype in
	"txt") make_txt > "$filepath" ;;
	"md-yaml") make_md "yaml" > "$filepath" ;;
	"md-toml") make_md "toml" > "$filepath" ;;
	"org") make_org > "$filepath" ;;
esac

# Change to notes directory and edit file
(cd $notes_dir && nvim "$filepath" +)

# For testing: show front matter and filename without creating file
# case $filetype in
# 	"txt") echo && make_txt && echo "$filename" ;;
# 	"md-yaml") echo && make_md "yaml" && echo "$filename" ;;
# 	"md-toml") echo && make_md "toml" && echo "$filename" ;;
# 	"org") echo && make_org && echo "$filename" ;;
# esac
