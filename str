#!/usr/bin/env bash

# Display workout log sheets for data stored in local text files.

data_file="$STR_DATA_DIR/str_data.tsv"
tmp_file="$(mktemp)"
trap 'rm -f $tmp_file' EXIT

# Edit data files
[[ $1 == "e" ]] && (cd "$STR_DATA_DIR" && nvim -c FZF) && exit

# Gum options
export GUM_FILTER_PLACEHOLDER=""
export GUM_INPUT_PLACEHOLDER=""

# Gum colors
export GUM_FILTER_HEADER_FOREGROUND="240"
export GUM_FILTER_INDICATOR_FOREGROUND="9"
export GUM_FILTER_MATCH_FOREGROUND="9"
export GUM_INPUT_CURSOR_FOREGROUND=""
export GUM_WRITE_CURSOR_FOREGROUND=""

# ANSI colors
if [[ -t 1 ]]; then
	bold=$(tput bold)
	accent=$(tput setaf 1)
	reset=$(tput sgr0)
else
	bold=""
	accent=""
	reset=""
fi

function new_entry()
{
	local date description location exercise wgt_type_default \
		wgt_type reps lbs notes weekday
	clear && echo "" > "$tmp_file"
	# Print blank sheet
	str 2000-01-01

	# Date
	date=$(gum input --header="  Date" --value="$(date -I)")
	echo -n -e "${date}\theader\t" >> "$tmp_file"
	clear && print_report "$date" "$tmp_file"

	# Description
	description=$(gum input --header="  Description")
	echo -n -e "${description}\t" >> "$tmp_file"
	clear && print_report "$date" "$tmp_file"

	# Location
	location=$(gum input --header="  Location")
	echo "$location" >> "$tmp_file"
	clear && print_report "$date" "$tmp_file"

	while true; do

		# Exercise
		exercise=$(awk -F "\t" '$2 == "exercise" {print $3}' "$data_file" \
			| sort --unique \
			| gum filter \
				--height=15 \
				--no-strict \
				--header="  Exercise")
		[[ $exercise ]] || break
		echo -n -e "${date}\texercise\t${exercise}\t" >> "$tmp_file"
		clear && print_report "$date" "$tmp_file"

		# Weight type
		wgt_type_default=$(tac "$data_file" \
			| grep --max-count=1 "$exercise" \
			| cut --fields=4)
		wgt_type=$(awk -F "\t" '$2 == "exercise" {print $4}' "$data_file" \
			| sort --unique \
			| gum filter \
				--height=15 \
				--no-strict \
				--header="  Weight type" \
				--value="$wgt_type_default")
		echo -n -e "${wgt_type}\t" >> "$tmp_file"
		clear && print_report "$date" "$tmp_file"

		local set_number=1
		local lbs=""
		while true; do

			# Reps
			reps=$(gum input --header="  ${exercise} set ${set_number} reps" --value="$reps")
			[[ $reps ]] || break
			echo -n -e "${reps}\t" >> "$tmp_file"
			clear && print_report "$date" "$tmp_file"

			# lbs
			[[ $wgt_type == "Bodyweight" ]] \
				|| lbs=$(gum input \
					--header="  ${exercise} set ${set_number} lbs" \
					--value="$lbs")
			echo -n -e "${lbs}\t" >> "$tmp_file"
			clear && print_report "$date" "$tmp_file"

			((set_number++))
		done
		echo "" >> "$tmp_file"
	done

	# Notes
	clear && print_report "$date" "$tmp_file"
	notes=$(gum write \
		--width=63 \
		--no-show-help \
		--header="  Notes" \
		--placeholder="")
	[[ $notes ]] && echo -e "${date}\tnotes\t${notes}" >> "$tmp_file"
	clear && print_report "$date" "$tmp_file"

	cat "$tmp_file" >> "$data_file"
}

function print_report()
{
	local date="$1"
	local data_file="$2"
	local width=61
	local weekday
	weekday="$(date --date="$date" +%A)"

	# Header: description, location, date
	awk \
		-v date="$date" \
		-v weekday="$weekday" \
		-v bold="$bold" \
		-v reset="$reset" \
		-f str-header.awk "$data_file"

	# Exercise list
	awk \
		-v date="$date" \
		-v bold="$bold" \
		-v accent="$accent" \
		-v reset="$reset" \
		-f str-exercises.awk "$data_file"

	# Footer: notes
	grep -P "${date}\tnotes" "$data_file" \
		| cut --fields=3 \
		| fmt --width="$width" \
		| awk -v bold="$bold" -v reset="$reset" -f str-notes.awk
}

case $1 in
	"n")
		# enter new workout interactively
		new_entry
		;;
	"t")
		# print report for today
		print_report "$(date -I)" "$data_file"
		;;
	"")
		# select from list of dates and print report
		date=$(awk -F "\t" '$2 == "header" {printf "%s %s\n", $1, $3}' "$data_file" \
			| sort --unique --reverse \
			| gum filter --no-fuzzy \
			| cut --delimiter=" " --fields=1)
		[[ $date ]] && print_report "$date" "$data_file"
		;;
	*)
		# print report for date specified at command line
		print_report "$1" "$data_file"
		;;
esac
